'use client'

import { useState, useCallback, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Download, Share2, Calendar as CalendarIcon, Save, Shield, FileText, Phone, Globe } from 'lucide-react'
import jsPDF from 'jspdf'
import autoTable from 'jspdf-autotable'
import type { Itinerary, Activity, DayPlan } from '@/types/itinerary'
import { DayPlanSection } from './DayPlanSection'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

// PDF helpers: sanitize text and draw bullets to avoid unsupported glyphs (emoji, fancy bullets)
const emojiLikeRegex = /[\u{1F300}-\u{1FAFF}\u{1F1E6}-\u{1F1FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{FE0F}]/gu
const sanitizeForPDF = (input?: string): string => {
  if (!input) return ''
  let s = input
    // Normalize & strip combining marks
    .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
    // Remove emojis and unsupported pictographs
    .replace(emojiLikeRegex, '')
    // Replace unsupported punctuation with ASCII equivalents
    .replace(/[•◦●]/g, '-')
    .replace(/[–—]/g, '-')
    .replace(/[“”]/g, '"')
    .replace(/[‘’]/g, "'")
    .replace(/\u00A0/g, ' ')
  // Finally, remove any remaining non-ASCII to avoid tofu boxes in jsPDF standard fonts
  s = s.replace(/[^\x09\x0A\x0D\x20-\x7E]/g, '')
  return s
}

const wrapAndRender = (doc: jsPDF, text: string, x: number, y: number, maxWidth = 176, lineHeight = 6, fontWeight: 'normal' | 'bold' = 'normal', fontSize?: number) => {
  if (fontWeight === 'bold') doc.setFont(undefined, 'bold')
  if (fontSize) doc.setFontSize(fontSize)
  const lines = doc.splitTextToSize(text, maxWidth)
  doc.text(lines, x, y)
  if (fontWeight === 'bold') doc.setFont(undefined, 'normal')
  return y + lines.length * lineHeight
}

const drawDotBullet = (doc: jsPDF, x: number, y: number, color: [number, number, number] = [25, 118, 210], size = 1.6) => {
  doc.setFillColor(...color)
  doc.circle(x, y - 2, size, 'F')
}

const renderFooter = (doc: jsPDF) => {
  const pageHeight = doc.internal.pageSize.getHeight()
  doc.setFontSize(11)
  doc.setTextColor('#0F3D63')
  doc.text(sanitizeForPDF('Book your trip with Idea Holiday!'), 105, pageHeight - 20, { align: 'center' })
  doc.setFontSize(9)
  doc.setTextColor('#888')
  doc.text(sanitizeForPDF('support@ideaholiday.com | +91 9696 777 391 | www.ideaholiday.com'), 105, pageHeight - 14, { align: 'center' })
  doc.setFontSize(9)
  doc.setTextColor('#1976d2')
  doc.text(sanitizeForPDF('*This itinerary was generated by AI and may require further personalization.'), 105, pageHeight - 8, { align: 'center' })
}

interface ItineraryBuilderProps {
  itinerary: Itinerary | null
  isLoading?: boolean
  onSave?: (itinerary: Itinerary) => void
  onExport?: (format: 'pdf' | 'json' | 'ical') => void
  onShare?: () => void
}

export function ItineraryBuilder({
  itinerary: initialItinerary,
  isLoading = false,
  onSave,
  onExport,
  onShare
}: ItineraryBuilderProps) {
  const [itinerary, setItinerary] = useState<Itinerary | null>(initialItinerary)
  const [isDirty, setIsDirty] = useState(false)
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
  const [activityToDelete, setActivityToDelete] = useState<{ dayId: string; activityId: string } | null>(null)

  // Update itinerary when prop changes
  useEffect(() => {
    if (initialItinerary) {
      setItinerary(initialItinerary)
      setIsDirty(false)
    } else {
      setItinerary(null)
    }
  }, [initialItinerary])

  const handleSave = () => {
    if (itinerary && onSave) {
      onSave(itinerary)
      setIsDirty(false)
    }
  }

  const handleDeleteActivity = useCallback((dayId: string, activityId: string) => {
    setActivityToDelete({ dayId, activityId })
    setDeleteDialogOpen(true)
  }, [])

  const confirmDelete = () => {
    if (!itinerary || !activityToDelete) return

    const updatedDays = itinerary.days.map(day => {
      if (day.id === activityToDelete.dayId) {
        return {
          ...day,
          activities: day.activities.filter(a => a.id !== activityToDelete.activityId)
        }
      }
      return day
    })

    setItinerary({
      ...itinerary,
      days: updatedDays,
      updatedAt: new Date().toISOString()
    })
    setIsDirty(true)
    setDeleteDialogOpen(false)
    setActivityToDelete(null)
  }

  const formatDates = (startDate?: string, endDate?: string) => {
    if (!startDate || !endDate) return ''
    const start = new Date(startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
    const end = new Date(endDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })
    return `${start} - ${end}`
  }

  // PDF Export Handler
  const handleExportPDF = () => {
    if (!itinerary) return
    const doc = new jsPDF()
    // Use a standard font with good ASCII coverage
    doc.setFont('helvetica', 'normal')
    // Header: Company branding
    doc.setFontSize(18)
    doc.setTextColor('#0F3D63')
    doc.text(sanitizeForPDF('Idea Holiday'), 14, 18)
    doc.setFontSize(10)
    doc.setTextColor('#888')
    doc.text(sanitizeForPDF('Your Travel Partner'), 14, 24)
    doc.setFontSize(11)
    doc.setTextColor('#1976d2')
    doc.text(sanitizeForPDF('AI-generated itinerary*'), 150, 18, { align: 'right', maxWidth: 50 })
    // Title & meta
    doc.setFontSize(15)
    doc.setTextColor('#222')
    doc.text(sanitizeForPDF(itinerary.title), 14, 34)
    doc.setFontSize(10)
    doc.setTextColor('#555')
    doc.text(sanitizeForPDF(`Destination: ${itinerary.destination} | Dates: ${itinerary.startDate || ''} - ${itinerary.endDate || ''} | Duration: ${itinerary.duration} days`), 14, 40)
    doc.setTextColor('#1976d2')
    doc.text(sanitizeForPDF(itinerary.description), 14, 46, { maxWidth: 180 })
    // Table for each day
    let y = 54
    itinerary.days.forEach((day, idx) => {
      // Beautiful day header
      if (y > 250) { doc.addPage(); y = 20 }
      doc.setFontSize(15)
      doc.setFont(undefined, 'bold')
      doc.setTextColor('#1976d2')
      doc.text(sanitizeForPDF(`${idx + 1}. ${day.title} (${day.date})`), 14, y)
      doc.setFont(undefined, 'normal')
      y += 13
      // Render dayBullets as beautiful paragraphs with emoji and color
      if (day.dayBullets && day.dayBullets.length > 0) {
        day.dayBullets.forEach((bullet, i) => {
          if (y > 270) { doc.addPage(); y = 20 }
          const clean = sanitizeForPDF(bullet)
          doc.setFontSize(12)
          doc.setTextColor('#222')
          drawDotBullet(doc, 16, y, [25, 118, 210], 1.6)
          y = wrapAndRender(doc, clean, 20, y, 172, 7)
          y += 3
        })
        y += 4
      } else if (day.description) {
        const cleanDesc = sanitizeForPDF(day.description)
        if (y > 270) { doc.addPage(); y = 20 }
        doc.setFontSize(12)
        doc.setTextColor('#222')
        y = wrapAndRender(doc, cleanDesc, 14, y, 180, 7)
        y += 3
      }
      // If activities exist, show table below paragraphs
      if (day.activities && day.activities.length > 0) {
        autoTable(doc, {
          startY: y,
          head: [['Time', 'Activity', 'Location', 'Cost', 'Tags']],
          body: day.activities.map(act => [
            sanitizeForPDF(`${act.timeSlot?.start || ''} - ${act.timeSlot?.end || ''}`),
            sanitizeForPDF(act.title),
            sanitizeForPDF(act.location?.name || ''),
            act.cost ? sanitizeForPDF(formatCurrency(act.cost.amount, act.cost.currency)) : '',
            sanitizeForPDF((act.tags || []).join(', '))
          ]),
          theme: 'striped',
          headStyles: { fillColor: [15, 61, 99], textColor: 255, fontSize: 10 },
          bodyStyles: { fontSize: 9 },
          margin: { left: 14, right: 14 },
          styles: { cellPadding: 2 },
        })
        y = ((doc as any).lastAutoTable?.finalY ?? y) + 10
      } else {
        y += 10
      }
  // Divider between days
  if (y > 270) { doc.addPage(); y = 20 }
  doc.setDrawColor(210, 210, 210)
  doc.setLineWidth(0.3)
  doc.line(14, y, 196, y)
  y += 12
    })

    // Travel Essentials section
    if (itinerary.visaRequirements || itinerary.documentsRequired?.length || itinerary.embassyContact) {
      if (y > 230) {
        doc.addPage()
        y = 20
      }
      // Subtle background for section
      doc.setFillColor(245, 248, 255)
      doc.rect(10, y - 2, 190, 70, 'F')
      doc.setFontSize(15)
      doc.setFont(undefined, 'bold')
      doc.setTextColor('#0F3D63')
      doc.text('Travel Essentials', 14, y)
      doc.setFont(undefined, 'normal')
      y += 8

      if (itinerary.visaRequirements) {
        doc.setFontSize(13)
        doc.setFont(undefined, 'bold')
        doc.setTextColor('#222')
        doc.text('Visa Information', 14, y)
        doc.setFont(undefined, 'normal')
        y += 6
        doc.setFontSize(11)
        doc.setTextColor('#555')
        y = wrapAndRender(doc, sanitizeForPDF(itinerary.visaRequirements), 14, y, 180, 6) + 4
      }

      if (itinerary.documentsRequired?.length) {
        doc.setFontSize(13)
        doc.setFont(undefined, 'bold')
        doc.setTextColor('#222')
        doc.text('Documents Required', 14, y)
        doc.setFont(undefined, 'normal')
        y += 6
        doc.setFontSize(11)
        doc.setTextColor('#555')
        itinerary.documentsRequired.forEach((d) => {
          if (y > 270) { doc.addPage(); y = 20 }
          const clean = sanitizeForPDF(d)
          drawDotBullet(doc, 16, y, [34, 197, 94], 2.2)
          y = wrapAndRender(doc, clean, 20, y, 172, 7)
        })
        y += 6
      }

      if (itinerary.embassyContact) {
        doc.setFontSize(13)
        doc.setFont(undefined, 'bold')
        doc.setTextColor('#222')
        doc.text('Embassy/Consulate Contact', 14, y)
        doc.setFont(undefined, 'normal')
        y += 6
        doc.setFontSize(11)
        doc.setTextColor('#555')
        const ec = itinerary.embassyContact
        const lines: string[] = []
        if (ec.name) lines.push(`Name: ${sanitizeForPDF(ec.name)}`)
        if (ec.city || ec.country) lines.push(`Location: ${sanitizeForPDF([ec.city, ec.country].filter(Boolean).join(', '))}`)
        if (ec.phone) lines.push(`Phone: ${sanitizeForPDF(ec.phone)}`)
        if (ec.email) lines.push(`Email: ${sanitizeForPDF(ec.email)}`)
        if (ec.website) lines.push(`Website: ${sanitizeForPDF(ec.website)}`)
        if (ec.directoryUrl) lines.push(`Directory: ${sanitizeForPDF(ec.directoryUrl)}`)
        if (ec.emergencyRegistration) lines.push(`Emergency Registration: ${sanitizeForPDF(ec.emergencyRegistration)}`)
        if (ec.address) lines.push(`Address: ${sanitizeForPDF(ec.address)}`)
        if (ec.hours) lines.push(`Hours: ${sanitizeForPDF(ec.hours)}`)
        if (ec.notes) lines.push(`Notes: ${sanitizeForPDF(ec.notes)}`)

        lines.forEach((l) => {
          y = wrapAndRender(doc, l, 14, y, 180, 6)
        })
        y += 2
      }
    }
  // Footer: CTA and contact (centered, always at bottom)
  const pageCount = (doc as any).getNumberOfPages?.() ?? 1
  for (let i = 1; i <= pageCount; i++) {
    (doc as any).setPage?.(i)
    renderFooter(doc)
  }
  // Save
  doc.save(`${sanitizeForPDF(itinerary.title).replace(/\s+/g, '-')}.pdf`)
  }

  const formatCurrency = (amount: number, currency: string) => {
    if (currency === 'INR' || currency === 'Rs') {
      return `₹${amount.toLocaleString('en-IN')}`
    }
    return `${currency} ${amount}`
  }

  if (isLoading) {
    return (
      <div className="h-full flex items-center justify-center">
        <div className="text-center space-y-4">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
            className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full mx-auto"
          />
          <div>
            <h3 className="text-lg font-semibold text-gray-900">Crafting Your Perfect Trip</h3>
            <p className="text-sm text-gray-500 mt-1">Our AI is analyzing destinations and activities...</p>
          </div>
        </div>
      </div>
    )
  }

  if (!itinerary) {
    return (
      <div className="h-full flex items-center justify-center p-8">
        <div className="text-center max-w-md">
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ type: "spring", bounce: 0.5 }}
          >
            <CalendarIcon className="w-24 h-24 text-gray-300 mx-auto mb-4" />
          </motion.div>
          <h3 className="text-xl font-bold text-gray-900 mb-2">
            Ready to Plan Your Adventure?
          </h3>
          <p className="text-gray-600">
            Use the AI Trip Planner on the left to generate your personalized itinerary. 
            Just describe your dream trip and let the magic happen! ✨
          </p>
        </div>
      </div>
    )
  }

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="flex-shrink-0 border-b bg-white p-6 space-y-4">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <h1 className="text-2xl font-bold text-gray-900 mb-1">
              {itinerary.title}
            </h1>
            <p className="text-sm text-gray-600">
              {itinerary.description}
            </p>
            <div className="flex items-center gap-4 mt-3 text-sm text-gray-500">
              <span>📍 {itinerary.destination}</span>
              {itinerary.startDate && itinerary.endDate && (
                <span>📅 {formatDates(itinerary.startDate, itinerary.endDate)}</span>
              )}
              <span>⏱️ {itinerary.duration} days</span>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex items-center gap-2">
            {isDirty && (
              <Button
                size="sm"
                onClick={handleSave}
                className="gap-2"
              >
                <Save className="w-4 h-4" />
                Save Changes
              </Button>
            )}
            
            {onShare && (
              <Button
                size="sm"
                variant="outline"
                onClick={onShare}
                className="gap-2"
              >
                <Share2 className="w-4 h-4" />
                Share
              </Button>
            )}

            <Button
              size="sm"
              variant="outline"
              onClick={handleExportPDF}
              className="gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </Button>
          </div>
        </div>

        {/* Tags and Budget */}
        <div className="flex items-center justify-between">
          <div className="flex flex-wrap gap-2">
            {itinerary.tags.slice(0, 5).map((tag) => (
              <span
                key={tag}
                className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full"
              >
                {tag}
              </span>
            ))}
          </div>

          {itinerary.totalCost && (
            <div className="text-right">
              <div className="text-sm text-gray-500">Total Budget</div>
              <div className="text-xl font-bold text-gray-900">
                {formatCurrency(itinerary.totalCost.amount, itinerary.totalCost.currency)}
              </div>
            </div>
          )}
        </div>
      </div>
      {/* Content */}
      <div className="flex-1 overflow-y-auto p-6 space-y-6">
        {/* Travel Essentials */}
        {(itinerary.visaRequirements || itinerary.documentsRequired?.length || itinerary.embassyContact) && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {itinerary.visaRequirements && (
              <Card>
                <CardHeader className="flex flex-row items-center gap-2 pb-2">
                  <Shield className="w-4 h-4 text-blue-600" />
                  <CardTitle className="text-sm">Visa Information</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-700 leading-relaxed">{itinerary.visaRequirements}</p>
                </CardContent>
              </Card>
            )}

            {itinerary.documentsRequired?.length ? (
              <Card>
                <CardHeader className="flex flex-row items-center gap-2 pb-2">
                  <FileText className="w-4 h-4 text-emerald-600" />
                  <CardTitle className="text-sm">Documents Required</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc pl-5 space-y-1 text-sm text-gray-700">
                    {itinerary.documentsRequired.map((doc, idx) => (
                      <li key={idx}>{doc}</li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            ) : null}

            {itinerary.embassyContact && (
              <Card>
                <CardHeader className="flex flex-row items-center gap-2 pb-2">
                  <Phone className="w-4 h-4 text-rose-600" />
                  <CardTitle className="text-sm">Embassy / Consulate</CardTitle>
                </CardHeader>
                <CardContent className="text-sm text-gray-700 space-y-1">
                  <div className="font-medium">{itinerary.embassyContact.name}</div>
                  {(itinerary.embassyContact.city || itinerary.embassyContact.country) && (
                    <div className="text-gray-600">{[itinerary.embassyContact.city, itinerary.embassyContact.country].filter(Boolean).join(', ')}</div>
                  )}
                  {itinerary.embassyContact.phone && (
                    <div>📞 {itinerary.embassyContact.phone}</div>
                  )}
                  {itinerary.embassyContact.email && (
                    <div>✉️ {itinerary.embassyContact.email}</div>
                  )}
                  <div className="flex flex-col gap-1 pt-1">
                    {itinerary.embassyContact.website && (
                      <a className="text-blue-600 hover:underline inline-flex items-center gap-1" href={itinerary.embassyContact.website} target="_blank" rel="noopener noreferrer">
                        <Globe className="w-3 h-3" /> Official Website
                      </a>
                    )}
                    {itinerary.embassyContact.directoryUrl && (
                      <a className="text-blue-600 hover:underline" href={itinerary.embassyContact.directoryUrl} target="_blank" rel="noopener noreferrer">
                        Missions Directory
                      </a>
                    )}
                    {itinerary.embassyContact.emergencyRegistration && (
                      <a className="text-blue-600 hover:underline" href={itinerary.embassyContact.emergencyRegistration} target="_blank" rel="noopener noreferrer">
                        Emergency Registration (MADAD)
                      </a>
                    )}
                  </div>
                  {itinerary.embassyContact.notes && (
                    <div className="text-xs text-gray-500 pt-1">{itinerary.embassyContact.notes}</div>
                  )}
                </CardContent>
              </Card>
            )}
          </div>
        )}

        {/* Days List */}
        <AnimatePresence mode="popLayout">
          {itinerary.days.map((day) => (
            <DayPlanSection
              key={day.id}
              day={day}
              onDeleteActivity={(activityId) => handleDeleteActivity(day.id, activityId)}
            />
          ))}
        </AnimatePresence>

        {/* Empty State for No Days */}
        {itinerary.days.length === 0 && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-12"
          >
            <p className="text-gray-500">No days planned yet. Generate an itinerary to get started!</p>
          </motion.div>
        )}
      </div>

      {/* Delete Confirmation Dialog */}
      {deleteDialogOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-white rounded-lg p-6 max-w-md w-full mx-4 shadow-xl"
          >
            <h3 className="text-lg font-semibold mb-2">Delete Activity?</h3>
            <p className="text-sm text-gray-600 mb-6">
              Are you sure you want to remove this activity from your itinerary? This action cannot be undone.
            </p>
            <div className="flex justify-end gap-3">
              <Button
                variant="outline"
                onClick={() => setDeleteDialogOpen(false)}
              >
                Cancel
              </Button>
              <Button
                onClick={confirmDelete}
                className="bg-red-600 hover:bg-red-700"
              >
                Delete
              </Button>
            </div>
          </motion.div>
        </div>
      )}
    </div>
  )
}
